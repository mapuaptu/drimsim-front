{"version":3,"sources":["img/user.png","components/UserCard.js","pages/Home.js","components/UserCity.js","components/UserProfile.js","components/BackIcon.js","components/BackLink.js","pages/User.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StyledUserCard","styled","div","_templateObject","UserCard","_ref","user","react_default","a","createElement","className","Link","to","concat","id","src","image","alt","name","age","knowledge","map","item","language","join","StyledHome","Home_templateObject","GET_ALL_USERS","gql","_templateObject2","Home","cards","componentDidMount","_this","play","timeline","TimelineLite","paused","this","staggerFrom","y","autoAlpha","_this2","react_apollo_browser_umd","query","onCompleted","loading","allUsers","data","Fragment","index","ref","node","key","components_UserCard","PureComponent","StyledUserCity","UserCity_templateObject","UPDATE_USER_CITY","UserCity_templateObject2","GET_USER","_templateObject3","UserCity","state","inputCity","handleInput","event","target","value","setState","props","variables","parseInt","city","mutation","userID","refetchQueries","updateUserCity","onSubmit","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","preventDefault","abrupt","stop","_x","apply","arguments","htmlFor","onChange","type","defaultProps","StyledUserProfile","UserProfile_templateObject","UserProfile","components_UserCity","frameworks","BackIcon","width","height","fill","viewBox","xmlns","x1","y1","x2","y2","stroke","d","StyledBackLink","BackLink_templateObject","BackLink","components_BackIcon","StyledUser","User_templateObject","User_templateObject2","User","match","params","components_BackLink","components_UserProfile","StyledNotFound","NotFound_templateObject","NotFound","client","GlobalStyles","createGlobalStyle","App_templateObject","ApolloClient","uri","App","dist","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","react_hot_loader","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2eca1240.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.80069b47.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport image from '../img/user.png';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledUserCard = styled.div`\n  margin-bottom: 20px;\n  border-radius: 6px;\n  width: 220px;\n  min-height: 292px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  background-color: #fff;\n  transition: 0.2s linear;\n\n  a {\n    display: flex;\n    flex-flow: column;\n    align-items: center;\n    padding-top: 40px;\n    height: 100%;\n    text-decoration: none;\n  }\n\n  .user-image {\n    margin-bottom: 22px;\n    border: 1px solid #e1e1e1;\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  .user-name {\n    margin-bottom: 10px;\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 21px;\n    color: #000;\n  }\n\n  .user-age {\n    margin-bottom: 10px;\n    font-size: 14px;\n    line-height: 16px;\n    color: #888;\n  }\n\n  .user-languages {\n    max-width: 150px;\n    font-size: 14px;\n    line-height: 16px;\n    text-align: center;\n    color: #000;\n  }\n\n  &:hover {\n    opacity: 0.8;\n    transform: translateY(5px);\n    transition: 0.2s linear;\n  }\n`;\n\nconst UserCard = ({ user }) => {\n  return (\n    <StyledUserCard className=\"user-card\">\n      <Link to={`/user/${user.id}`}>\n        <div className=\"user-image\">\n          <img src={image} alt=\"\" />\n        </div>\n        <div className=\"user-name\">{user.name}</div>\n        <div className=\"user-age\">{user.age} years</div>\n        <div className=\"user-languages\">{user.knowledge.map(item => item.language).join(', ')}</div>\n      </Link>\n    </StyledUserCard>\n  );\n};\n\nUserCard.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    knowledge: PropTypes.arrayOf(\n      PropTypes.shape({\n        language: PropTypes.string,\n        frameworks: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ),\n  }),\n};\n\nexport default UserCard;\n","import React, { PureComponent } from 'react';\nimport UserCard from '../components/UserCard';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport styled from 'styled-components';\nimport { TimelineLite } from 'gsap';\n\nconst StyledHome = styled.div`\n  display: flex;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #e5e5e5;\n\n  .home-inner {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-between;\n    padding-top: 49px;\n    padding-bottom: 118px;\n    width: 700px;\n\n    @media (max-width: 750px) {\n      width: 460px;\n    }\n\n    @media (max-width: 550px) {\n      width: 220px;\n    }\n  }\n`;\n\nconst GET_ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      name\n      age\n      knowledge {\n        language\n      }\n    }\n  }\n`;\n\nclass Home extends PureComponent {\n  cards = [];\n\n  play() {\n    const time = 0.3;\n    const timeline = new TimelineLite({ paused: true });\n    const { cards } = this;\n\n    timeline.staggerFrom(\n      cards,\n      time,\n      {\n        y: 50,\n        autoAlpha: 0,\n      },\n      0.05,\n    );\n    timeline.play();\n  }\n\n  componentDidMount = () => {\n    this.play();\n  };\n\n  render() {\n    return (\n      <StyledHome className=\"home\">\n        <div className=\"home-inner\">\n          <Query\n            query={GET_ALL_USERS}\n            onCompleted={() => {\n              this.play();\n            }}\n          >\n            {({ loading, data }) => {\n              const { allUsers } = data;\n\n              return loading ? (\n                <div>Loading...</div>\n              ) : (\n                <>\n                  {allUsers.map((user, index) => (\n                    <div\n                      ref={node => {\n                        this.cards[index] = node;\n                      }}\n                      key={user.id}\n                    >\n                      <UserCard user={user} />\n                    </div>\n                  ))}\n                </>\n              );\n            }}\n          </Query>\n        </div>\n      </StyledHome>\n    );\n  }\n}\n\nexport default Home;\n","import React, { PureComponent } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation, Query } from 'react-apollo';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledUserCity = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n\n  div.user-city {\n    position: relative;\n    top: -9px;\n    margin-bottom: 32px;\n    width: 100%;\n    font-size: 14px;\n    line-height: 16px;\n    text-align: center;\n\n    &::after {\n      content: '';\n      position: absolute;\n      left: calc(50% - 241px);\n      bottom: -20px;\n      width: 500px;\n      height: 1px;\n      background-color: #d5d5d5;\n\n      @media (max-width: 560px) {\n        left: calc(50% - 150px);\n        bottom: -20px;\n        width: 300px;\n      }\n    }\n  }\n\n  form.user-city {\n    position: relative;\n    display: flex;\n    align-items: center;\n    margin-bottom: 42px;\n    padding-left: 19px;\n\n    &::after {\n      content: '';\n      position: absolute;\n      left: calc(50% - 241px);\n      bottom: -21px;\n      width: 500px;\n      height: 1px;\n      background-color: #d5d5d5;\n\n      @media (max-width: 560px) {\n        left: calc(50% - 150px);\n        width: 300px;\n      }\n    }\n\n    label {\n      margin-right: 9px;\n      font-size: 14px;\n      line-height: 16px;\n\n      @media (max-width: 560px) {\n        margin-right: 0;\n        margin-bottom: 10px;\n      }\n    }\n\n    input {\n      display: block;\n      margin-right: 10px;\n      border: 1px solid #d5d5d5;\n      padding: 0 10px;\n      width: 170px;\n      height: 30px;\n      box-shadow: 0 1px inset rgba(0, 0, 0, 0.25);\n      font-size: 14px;\n      line-height: 16px;\n\n      @media (max-width: 560px) {\n        margin-right: 0;\n        margin-bottom: 10px;\n      }\n    }\n\n    button {\n      border: none;\n      border-radius: 4px;\n      width: 85px;\n      height: 30px;\n      color: #fff;\n      background-color: #47b2ff;\n      transition: 0.2s linear;\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.8;\n        transition: 0.2s linear;\n      }\n    }\n\n    @media (max-width: 560px) {\n      flex-flow: column;\n      padding-left: 0;\n    }\n  }\n`;\n\nconst UPDATE_USER_CITY = gql`\n  mutation UpdateUserCity($userID: ID!, $city: String!) {\n    updateUserCity(userID: $userID, city: $city) {\n      name\n      city\n    }\n  }\n`;\n\nconst GET_USER = gql`\n  query User($id: Int!) {\n    user(id: $id) {\n      id\n      city\n    }\n  }\n`;\n\nclass UserCity extends PureComponent {\n  state = {\n    inputCity: '',\n  };\n\n  handleInput = event => {\n    const inputCity = event.target.value;\n\n    this.setState(() => ({\n      inputCity,\n    }));\n  };\n\n  render() {\n    const { id } = this.props;\n\n    return (\n      <StyledUserCity>\n        <Query query={GET_USER} variables={{ id: parseInt(id, 10) }}>\n          {({ loading, data }) => {\n            const { user } = data;\n\n            return loading ? (\n              <div>Loading...</div>\n            ) : user.city ? (\n              <div className=\"user-city\">{user.city}</div>\n            ) : (\n              <Mutation\n                mutation={UPDATE_USER_CITY}\n                variables={{ userID: id, city: this.state.inputCity }}\n                refetchQueries={[{ query: GET_USER, variables: { id: parseInt(id, 10) } }]}\n              >\n                {updateUserCity => {\n                  return (\n                    <form\n                      onSubmit={async event => {\n                        event.preventDefault();\n                        if (this.state.inputCity) {\n                          await updateUserCity();\n                          return this.setState(() => ({\n                            inputCity: '',\n                          }));\n                        }\n                      }}\n                      className=\"user-city\"\n                    >\n                      <label htmlFor=\"city\">Country:</label>\n                      <input\n                        onChange={this.handleInput}\n                        value={this.state.inputCity}\n                        type=\"text\"\n                        id=\"city\"\n                      />\n                      <button>Submit</button>\n                    </form>\n                  );\n                }}\n              </Mutation>\n            );\n          }}\n        </Query>\n      </StyledUserCity>\n    );\n  }\n}\n\nUserCity.propTypes = {\n  id: PropTypes.string,\n};\n\nUserCity.defaultProps = {\n  id: '1',\n};\n\nexport default UserCity;\n","import React from 'react';\nimport image from '../img/user.png';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport UserCity from './UserCity';\n\nconst StyledUserProfile = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n\n  .user-image {\n    margin-bottom: 20px;\n    border: 1px solid #e1e1e1;\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  .user-name {\n    margin-bottom: 12px;\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 21px;\n    color: #000;\n  }\n\n  .user-age {\n    margin-bottom: 20px;\n    font-size: 14px;\n    line-height: 16px;\n    color: #888;\n  }\n\n  .user-knowledge {\n    .knowledge-block {\n      display: flex;\n      flex-flow: column;\n      align-items: center;\n      margin-bottom: 21px;\n    }\n\n    .user-language {\n      margin-bottom: 1px;\n      font-weight: 700;\n      font-size: 16px;\n    }\n\n    .user-frameworks {\n      font-weight: 400;\n    }\n  }\n`;\n\nconst UserProfile = ({ user }) => {\n  return (\n    <StyledUserProfile className=\"user-profile\">\n      <div className=\"user-image\">\n        <img src={image} alt=\"\" />\n      </div>\n      <div className=\"user-name\">{user.name}</div>\n      <div className=\"user-age\">{user.age} years</div>\n      <UserCity id={user.id} />\n      <div className=\"user-knowledge\">\n        {user.knowledge.map((item, index) => {\n          return (\n            <div className=\"knowledge-block\" key={index}>\n              <div className=\"user-language\">{item.language}</div>\n              <div className=\"user-frameworks\">{item.frameworks.join(', ')}</div>\n            </div>\n          );\n        })}\n      </div>\n    </StyledUserProfile>\n  );\n};\n\nUserProfile.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    city: PropTypes.string,\n    knowledge: PropTypes.arrayOf(\n      PropTypes.shape({\n        language: PropTypes.string,\n        frameworks: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ),\n  }),\n};\n\nexport default UserProfile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BackIcon = ({ width, height, fill }) => {\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      fill={fill}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <line x1=\"24\" y1=\"6.5\" x2=\"4\" y2=\"6.5\" stroke={fill} />\n      <path d=\"M8.52372e-07 6.5L6.75 0.870835L6.75 12.1292L8.52372e-07 6.5Z\" fill={fill} />\n    </svg>\n  );\n};\n\nBackIcon.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  fill: PropTypes.string,\n};\n\nBackIcon.defaultProps = {\n  width: 20,\n  height: 20,\n  fill: '#000',\n};\n\nexport default BackIcon;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport BackIcon from './BackIcon';\n\nconst StyledBackLink = styled.div`\n  position: absolute;\n  left: 40px;\n  top: 30px;\n  transition: 0.2s linear;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #000;\n  }\n\n  .back-icon {\n    margin-right: 10px;\n  }\n\n  .back-text {\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 21px;\n  }\n\n  &:hover {\n    opacity: 0.8;\n    transform: translateX(-5px);\n    transition: 0.2s linear;\n  }\n`;\n\nconst BackLink = props => {\n  return (\n    <StyledBackLink>\n      <Link to=\"/\">\n        <div className=\"back-icon\">\n          <BackIcon fill=\"#000\" width={24} height={13} />\n        </div>\n        <div className=\"back-text\">Back</div>\n      </Link>\n    </StyledBackLink>\n  );\n};\n\nexport default BackLink;\n","import React from 'react';\nimport UserProfile from '../components/UserProfile';\nimport BackLink from '../components/BackLink';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport styled from 'styled-components';\n\nconst StyledUser = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  min-height: 100vh;\n  background-color: #fff;\n\n  .user-inner {\n    position: relative;\n    left: -9px;\n    padding-top: 80px;\n    width: 500px;\n\n    @media (max-width: 560px) {\n      left: 0;\n      width: 100%;\n    }\n  }\n`;\n\nconst GET_USER = gql`\n  query User($id: Int!) {\n    user(id: $id) {\n      id\n      name\n      age\n      knowledge {\n        language\n        frameworks\n      }\n    }\n  }\n`;\n\nconst User = ({ match }) => {\n  const id = parseInt(match.params.id, 10) || 1;\n\n  return (\n    <StyledUser>\n      <BackLink />\n      <div className=\"user-inner\">\n        <Query query={GET_USER} variables={{ id }}>\n          {({ loading, data }) => {\n            return loading ? <div>Loading...</div> : <UserProfile user={data.user} />;\n          }}\n        </Query>\n      </div>\n    </StyledUser>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport BackLink from '../components/BackLink';\nimport styled from 'styled-components';\n\nconst StyledNotFound = styled.div`\n  position: relative;\n\n  .inner {\n    display: flex;\n    justify-content: center;\n    margin-right: auto;\n    margin-left: auto;\n    padding-top: 150px;\n    width: 700px;\n\n    @media (max-width: 560px) {\n      width: 100%;\n    }\n  }\n\n  .title {\n    font-size: 25px;\n  }\n`;\n\nconst NotFound = () => {\n  return (\n    <StyledNotFound>\n      <BackLink />\n      <div className=\"inner\">\n        <div className=\"title\">404 Not Found</div>\n      </div>\n    </StyledNotFound>\n  );\n};\n\nexport default NotFound;\n","import React, { PureComponent } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport { Normalize } from 'styled-normalize';\nimport Home from './pages/Home';\nimport User from './pages/User';\nimport NotFound from './pages/NotFound';\n\nconst GlobalStyles = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  html {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n  }\n`;\n\nlet client;\n\nswitch (process.env.NODE_ENV) {\n  case 'development': {\n    client = new ApolloClient({ uri: 'http://localhost:5000/graphql' });\n    break;\n  }\n  case 'production': {\n    client = new ApolloClient({ uri: '/graphql' });\n    break;\n  }\n  default: {\n    break;\n  }\n}\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Normalize />\n        <GlobalStyles />\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/user/:id\" component={User} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Add this import:\nimport { AppContainer } from 'react-hot-loader';\n\n// Wrap the rendering in a function:\nconst render = Component => {\n  ReactDOM.render(\n    // Wrap App inside AppContainer\n    <AppContainer>\n      <App />\n    </AppContainer>,\n    document.getElementById('root'),\n  );\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// Render once\nrender(App);\n\n// Webpack Hot Module Replacement API\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    render(App);\n  });\n}\n"],"sourceRoot":""}